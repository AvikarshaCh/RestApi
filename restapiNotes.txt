19/3/24

Create REST API

step1 : create package.json file
        npm init
step2 : install install express
        npm i express --save
step3 : install dotenv
        npm i dotenv --save
step4 : create server.js and create server using http module.
step5 :craete app.js file and create multiple routes by using middleware then export it in server.js file
step6 : to handle multiple request, create api folder
        create two files
        -products.js
        -order.js
step7 : create multiple routes fpr products.js and order.js file and import it in app.js file and insert it in app.use() middleware.
step8: create dotenv file and access it.
step9 : create custom command to start server
go to package.json => in script section write =>"start":"nodemon server.js"
terminate server and restart it by typing npm run start.
step10: morgan(it gives you log information of our actionws in server)
To use it , first we need to install it,then import it in middleware.
step11 : Error handling on wrong routepath
step12 :
step13 : Handling CORS error 
C-Cross, O-origin,R-resource,S-sharing

-this is error generated by browser,this error occurs when request came from different resources as URL.
-because of security reasons this error occurs.



uid: avikarshac54
password:pmYWZN9BUcmGb16E

UserId:avikarshac54
Upassword:7O6n5qi7oZPkG9Ho

Link : mongodb+srv://avikarshac54:7O6n5qi7oZPkG9Ho@cluster0.rlrjap1.mongodb.net/
=======================================================
20/03/24

step14: make request to mongoDB

-we create mongoDB account
-to login into account use the link https://account.mongodb.com/account/login

click on new project => give name and assign member in products 
click on create project => create and deploy on create option => select M0 free option => select AWS => select region (Mumbai as an example) => click on create deploy option => to connect customersave userID and password and click on create database user => choose a connection method => choose compass option => copy the connection string and then mongoDB => then compass will open

MongoDB : Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment

npm i Mongoose

step15 : import mongoose library in app.js 
cont mongoose = require('mongoose)

step16 : create model to access access data from mongoDB 

Task : create API with get request(all order) as well as get and delete request API for single order.

*How to add or upload file or images on server database.

for this we use multer library.

Multer: Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.

how to install
npm install --save multer
==================================================================================================================================================

21/03/24

Task: create API for the User containing the fields email and password , for the user you have to create get, delete , post , and put request. 

request : get all user 
request : get single user 
request : add user 
request : update user 
request : delete user 

*How to use bcrypt
npm i bcrypt

*How to use jsonwebtoken
npm i jsonwebtoken

===================================================================

22/3/24

public
        -put frontend code in separate
        -put API

*Deployment
